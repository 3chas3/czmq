zloop(7)
========

NAME
----
zloop - event-driven reactor

SYNOPSIS
--------
----
//  Callback function for reactor events
typedef int (zloop_fn) (zloop_t *loop, void *socket, void *arg);

//  Create a new zloop reactor
zloop_t *
    zloop_new (void);

//  Destroy a reactor
void
    zloop_destroy (zloop_t **self_p);

//  Register a socket reader, on one socket
int
    zloop_reader (zloop_t *self, void *socket, zloop_fn handler, void *arg);

//  Cancel the reader on the specified socket, if any
void
    zloop_cancel (zloop_t *self, void *socket);

//  Register a timer that will go off after 'delay' msecs, and will
//  repeat 'times' times, unless 'times' is zero, meaning repeat forever.
int
    zloop_timer (zloop_t *self, size_t delay, size_t times, zloop_fn handler, void *arg);

//  Set verbose tracing of reactor on/off
void
    zloop_set_verbose (zloop_t *self, Bool verbose);

//  Start the reactor, ends if a callback function returns -1, or the process
//  received SIGINT or SIGTERM.
int
    zloop_start (zloop_t *self);

//  Self test of this class
int
    zloop_test (Bool verbose);
----

DESCRIPTION
-----------

The zloop class provides an event-driven reactor pattern. The reactor
handles socket readers (not writers in the current implementation), and
once-off or repeated timers. Its resolution is 1 msec. It uses a tickless
timer to reduce CPU interrupts in inactive processes.


EXAMPLE
-------
.From zloop_test method
----
    zctx_t *ctx = zctx_new ();

    void *output = zsocket_new (ctx, ZMQ_PAIR);
    zsocket_bind (output, "inproc://zloop.test");
    void *input = zsocket_new (ctx, ZMQ_PAIR);
    zsocket_connect (input, "inproc://zloop.test");

    zloop_t *loop = zloop_new ();
    assert (loop);
    zloop_set_verbose (loop, verbose);

    //  After 10 msecs, send a ping message to output
    zloop_timer (loop, 10, 1,  s_timer_event, output);
    //  When we get the ping message, end the reactor
    zloop_reader (loop, input, s_socket_event, NULL);
    zloop_start (loop);

    zloop_destroy (&loop);
    assert (loop == NULL);

    zctx_destroy (&ctx);
----

SEE ALSO
--------
linkzapi:zapi[7]
