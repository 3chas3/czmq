zsocket(7)
==========

NAME
----
zsocket - working with 0MQ sockets

SYNOPSIS
--------
----
//  Create a new socket within our libzapi context, replaces zmq_socket.
//  If the socket is a SUB socket, automatically subscribes to everything.
//  Use this to get automatic management of the socket at shutdown.
void *
    zsocket_new (zctx_t *self, int type);

//  Destroy a socket within our libzapi context, replaces zmq_close.
void
    zsocket_destroy (zctx_t *self, void *socket);

//  Bind a socket to a formatted endpoint
//  Checks with assertion that the bind was valid
void
    zsocket_bind (void *socket, const char *format, ...);

//  Connect a socket to a formatted endpoint
//  Checks with assertion that the connect was valid
void
    zsocket_connect (void *socket, const char *format, ...);

//  Self test of this class
int
    zsocket_test (Bool verbose);
----

DESCRIPTION
-----------

The zsocket class provides helper functions for 0MQ sockets. It doesn't
wrap the 0MQ socket type, to avoid breaking all libzmq socket-related
calls. Automatically subscribes SUB sockets to "".


EXAMPLE
-------
.From zsocket_test method
----
    zctx_t *ctx = zctx_new ();

    //  Create a detached thread, let it run
    char *interf = "*";
    char *domain = "localhost";
    int service = 5555;

    void *writer = zsocket_new (ctx, ZMQ_PUSH);
    void *reader = zsocket_new (ctx, ZMQ_PULL);
    zsocket_bind (writer, "tcp://%s:%d", interf, service);
    zsocket_connect (reader, "tcp://%s:%d", domain, service);
    zstr_send (writer, "HELLO");
    char *message = zstr_recv (reader);
    assert (message);
    assert (streq (message, "HELLO"));
    free (message);
    zsocket_destroy (ctx, writer);

    zctx_destroy (&ctx);
----

SEE ALSO
--------
linkzapi:zapi[7]
