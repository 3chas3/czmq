zmsg(7)
=======

NAME
----
zmsg - working with multipart messages

SYNOPSIS
--------
----
zmsg_t *
    zmsg_new (void);
void
    zmsg_destroy (zmsg_t **self_p);
zmsg_t *
    zmsg_recv (void *socket);
void
    zmsg_send (zmsg_t **self, void *socket);
size_t
    zmsg_size (zmsg_t *self);
void
    zmsg_push (zmsg_t *self, zframe_t *frame);
void
    zmsg_append (zmsg_t *self, zframe_t *frame);
void
    zmsg_pushmem (zmsg_t *self, const void *src, size_t size);
void
    zmsg_appendmem (zmsg_t *self, const void *src, size_t size);
zframe_t *
    zmsg_pop (zmsg_t *self);
void
    zmsg_remove (zmsg_t *self, zframe_t *frame);
zframe_t *
    zmsg_first (zmsg_t *self);
zframe_t *
    zmsg_next (zmsg_t *self);
zframe_t *
    zmsg_body (zmsg_t *self);
void
    zmsg_save (zmsg_t *self, FILE *file);
zmsg_t *
    zmsg_load (FILE *file);
void
    zmsg_dump (zmsg_t *self);
int
    zmsg_test (int verbose);
----

DESCRIPTION
-----------
The zmsg class provides methods to send and receive multipart messages
across 0MQ sockets.


EXAMPLE
-------
.From zmsg_test method
----
    zctx_t *ctx = zctx_new ();

    void *output = zctx_socket_new (ctx, ZMQ_PAIR);
    zmq_bind (output, "inproc://zmsg.test");
    void *input = zctx_socket_new (ctx, ZMQ_PAIR);
    zmq_connect (input, "inproc://zmsg.test");

    //  Test send and receive of single-frame message
    zmsg_t *msg = zmsg_new ();
    zframe_t *frame = zframe_new ("Hello", 5);
    zmsg_push (msg, frame);
    assert (zmsg_size (msg) == 1);
    zmsg_send (&msg, output);
    assert (msg == NULL);
    
    msg = zmsg_recv (input);
    assert (msg);
    assert (zmsg_size (msg) == 1);
    zmsg_destroy (&msg);

    //  Test send and receive of multi-frame message
    msg = zmsg_new ();
    zmsg_appendmem (msg, "Frame0", 6);
    zmsg_appendmem (msg, "Frame1", 6);
    zmsg_appendmem (msg, "Frame2", 6);
    zmsg_appendmem (msg, "Frame3", 6);
    zmsg_appendmem (msg, "Frame4", 6);
    zmsg_appendmem (msg, "Frame5", 6);
    zmsg_appendmem (msg, "Frame6", 6);
    zmsg_appendmem (msg, "Frame7", 6);
    zmsg_appendmem (msg, "Frame8", 6);
    zmsg_appendmem (msg, "Frame9", 6);
    zmsg_send (&msg, output);

    msg = zmsg_recv (input);
    assert (msg);
    assert (zmsg_size (msg) == 10);
    if (verbose)
        zmsg_dump (msg);
    
    //  Save to a file, read back
    FILE *file = fopen ("zmsg.test", "w");
    assert (file);
    zmsg_save (msg, file);
    zmsg_destroy (&msg);
    fclose (file);
    
    file = fopen ("zmsg.test", "r");
    msg = zmsg_load (file);
    fclose (file);
    remove ("zmsg.test");
    assert (zmsg_size (msg) == 10);
    
    //  Remove all frames except first and last
    int frame_nbr;
    for (frame_nbr = 0; frame_nbr < 8; frame_nbr++) {
        zmsg_first (msg);
        frame = zmsg_next (msg);
        zmsg_remove (msg, frame);
        zframe_destroy (&frame);
    }
    assert (zmsg_size (msg) == 2);
    zmsg_pushmem (msg, "", 0);
    zmsg_pushmem (msg, "Address", 7);
    assert (zmsg_size (msg) == 4);
    frame = zmsg_body (msg);
    assert (memcmp (zframe_data (frame), "Frame0", 6) == 0);
    zmsg_destroy (&msg);
    
    //  Now try methods on an empty message
    msg = zmsg_new ();
    assert (zmsg_size (msg) == 0);
    assert (zmsg_body (msg) == NULL);
    assert (zmsg_first (msg) == NULL);
    assert (zmsg_next (msg) == NULL);
    assert (zmsg_pop (msg) == NULL);
    zmsg_destroy (&msg);

    zctx_destroy (&ctx);
----


SEE ALSO
--------
linkzapi:zapi[7]

