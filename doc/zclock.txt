zclock(7)
=========

NAME
----
zclock - millisecond clocks and delays

SYNOPSIS
--------
----
//  Sleep for a number of milliseconds
void 
    zclock_sleep (int msecs);
//  Return current system clock as milliseconds
int64_t 
    zclock_time (void);
//  Selftest
int 
    zclock_test (Bool verbose);
----

DESCRIPTION
-----------

The zclock class provides essential sleep and system time functions, used 
to slow down threads for testing, and calculate timers for polling. Wraps 
the non-portable system calls in a simple portable API.

This class contains some small surprises. Most amazing, win32 did an API
better than POSIX. The win32 Sleep() call is not only a neat 1-liner, it
also sleeps for milliseconds, whereas the POSIX call asks us to think in
terms of nanoseconds, which is insane. I've decided every single man page
for this library will say "insane" at least once. Anyhow, milliseconds 
are a concept we can deal with. Seconds are too fat, nanoseconds too 
tiny, but milliseconds are just right for slices of time we want to work
with at the 0MQ scale. zclock doesn't give you objects to work with, we
like the zapi class model but we're not insane. There, got it in again.

EXAMPLE
-------
.From zclock_test method
----
----

SEE ALSO
--------
linkzapi:zapi[7]
