zproxy(3)
=========

NAME
----
zproxy - convenient zmq_proxy api

SYNOPSIS
--------
----
//  Create a new zproxy object
CZMQ_EXPORT zproxy_t* 
    zproxy_new (zctx_t *ctx, int zproxy_type);

//  Destroy a zproxy object
CZMQ_EXPORT void
    zproxy_destroy (zproxy_t **self_p);

// Start and zmq_proxy in an attached thread, binding to endpoints.
CZMQ_EXPORT int
    zproxy_bind (zproxy_t *self, const char *frontend_addr,
            const char *backend_addr, const char *capture_addr);

// Get zproxy type
CZMQ_EXPORT int
    zproxy_type (zproxy_t *self);

// Get zproxy frontend address
CZMQ_EXPORT char *
    zproxy_frontend_addr (zproxy_t *self);

// Get zproxy frontend type
CZMQ_EXPORT int
    zproxy_frontend_type (zproxy_t *self);

// Get zproxy backend address
CZMQ_EXPORT char *
    zproxy_backend_addr (zproxy_t *self);

// Get zproxy backend type
CZMQ_EXPORT int
    zproxy_backend_type (zproxy_t *self);

// Get zproxy capture address
CZMQ_EXPORT char *
    zproxy_capture_addr (zproxy_t *self);

// Get zproxy capture type
CZMQ_EXPORT int
    zproxy_capture_type (zproxy_t *self);

//  Self test of this class
CZMQ_EXPORT int
    zproxy_test (bool verbose);
----

DESCRIPTION
-----------

The zproxy class simplifies working with the zmq_proxy api.

If we used a steerable proxy we could do termination better, and
allow creation/termination of proxies without destroying contexts.
Then, zproxy_destroy would send the proxy task a KILL message and
wait for an OK response, then return to the caller.

EXAMPLE
-------
.From zproxy_test method
----
    const char *front_addr = "inproc://proxy_front";
    const char *back_addr = "inproc://proxy_back";
    const char *capture_addr = "inproc://proxy_capture";

    //  Create and start the proxy
    zctx_t *ctx = zctx_new ();
    zproxy_t *proxy = zproxy_new (ctx, ZPROXY_STREAMER);
    int rc = zproxy_bind (proxy, front_addr, back_addr, capture_addr);
    assert (rc);

    //  Test the accessor methods
    assert (zproxy_type (proxy) == ZPROXY_STREAMER);
    assert (zproxy_frontend_type (proxy) == ZMQ_PULL);
    assert (zproxy_backend_type (proxy) == ZMQ_PUSH);
    assert (zproxy_capture_type (proxy) == ZMQ_PUB);

    char *front_check = zproxy_frontend_addr (proxy);
    assert (streq (front_check, front_addr));
    char *back_check = zproxy_backend_addr (proxy);
    assert (streq (back_check, back_addr));
    char *capture_check = zproxy_capture_addr (proxy);
    assert (streq (capture_check, capture_addr));

    //  Connect to the proxy front, back, and capture ports
    void *front_s = zsocket_new (ctx, ZMQ_PUSH);
    assert (front_s);
    zsocket_connect (front_s, zproxy_frontend_addr (proxy));

    void *back_s = zsocket_new (ctx, ZMQ_PULL);
    assert (back_s);
    zsocket_connect (back_s, zproxy_backend_addr (proxy));

    void *capture_s = zsocket_new (ctx, ZMQ_SUB);
    zsocket_set_subscribe (capture_s, "");
    assert (back_s);
    zsocket_connect (capture_s, zproxy_capture_addr (proxy));

    //  Send a message through the proxy and receive it
    zstr_send (front_s, "STREAMER_TEST");
    
    char *back_resp = zstr_recv (back_s);
    assert (back_resp);
    assert (streq ("STREAMER_TEST", back_resp));
    free (back_resp);
    
    char *capture_resp = zstr_recv (capture_s);
    assert (capture_resp);
    assert (capture_resp);
    assert (streq ("STREAMER_TEST", capture_resp));
    free (capture_resp);
   
    //  Destroying the context will stop the proxy, see note at
    //  start of source about using zmq_proxy_steerable instead.
    //  The sleep here is to ensure memory is freed so valgrind
    //  will be happy.
    zctx_destroy (&ctx);
    zproxy_destroy (&proxy);
    zclock_sleep (100);
    
----

SEE ALSO
--------
linkczmq:czmq[7]
