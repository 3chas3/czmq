zproxy(3)
=========

NAME
----
zproxy - convenient zmq_proxy API

SYNOPSIS
--------
----
//  Create a new zproxy object
CZMQ_EXPORT zproxy_t *
    zproxy_new (zctx_t *ctx, int zproxy_type);

// Pause a zproxy object
CZMQ_EXPORT int
    zproxy_pause (zproxy_t *self);

// Resume a zproxy object
CZMQ_EXPORT int
    zproxy_resume (zproxy_t *self);

// Terminate a zproxy object
CZMQ_EXPORT int
    zproxy_terminate (zproxy_t *self);

//  Destroy a zproxy object
CZMQ_EXPORT void
    zproxy_destroy (zproxy_t **self_p);

//  Start and zmq_proxy in an attached thread, binding to endpoints
//  Returns 0 if OK, -1 if there was an error
CZMQ_EXPORT int
    zproxy_bind (zproxy_t *self, const char *frontend_addr,
            const char *backend_addr, const char *capture_addr,
            const char *control_addr);

//  Get zproxy type
CZMQ_EXPORT int
    zproxy_type (zproxy_t *self);

// Get zproxy frontend address
CZMQ_EXPORT char *
    zproxy_frontend_addr (zproxy_t *self);

//  Get zproxy frontend type
CZMQ_EXPORT int
    zproxy_frontend_type (zproxy_t *self);

//  Get zproxy backend address
CZMQ_EXPORT char *
    zproxy_backend_addr (zproxy_t *self);

//  Get zproxy backend type
CZMQ_EXPORT int
    zproxy_backend_type (zproxy_t *self);

//  Get zproxy capture address
CZMQ_EXPORT char *
    zproxy_capture_addr (zproxy_t *self);

//  Get zproxy capture type
CZMQ_EXPORT int
    zproxy_capture_type (zproxy_t *self);

//  Self test of this class
CZMQ_EXPORT int
    zproxy_test (bool verbose);
----

DESCRIPTION
-----------

The zproxy class simplifies working with the zmq_proxy API.

I've modified zproxy to attempt to "do the right thing" depending
on the underlying version of libzmq.  The functions to send commands
to a steerable instance now return a -1 if czmq is built against a
libzmq version that doesn't have steerable proxy.  Note - I'm not convinced
I shouldn't just assert instead and am open to other approaches - just
wanted to get it "working" first.  If built against libzmq 2.2, zproxy
calls zmq_device with the correct arguments based on zproxy type.

EXAMPLE
-------
.From zproxy_test method
----

    const char *front_addr = "inproc://proxy_front";
    const char *back_addr = "inproc://proxy_back";
    const char *capture_addr = "inproc://proxy_capture";
    const char *control_addr = "inproc://proxy_control";
    
    //  Create and start the proxy
    zctx_t *ctx = zctx_new ();
    zproxy_t *proxy = zproxy_new (ctx, ZPROXY_STREAMER);

    int rc = zproxy_bind (proxy, front_addr, back_addr, 
            capture_addr, control_addr);

    // Pause for 10ms 
    zclock_sleep (10);

    assert (rc == 0);
    
    assert (zproxy_type (proxy) == ZPROXY_STREAMER);
    assert (zproxy_frontend_type (proxy) == ZMQ_PULL);
    assert (zproxy_backend_type (proxy) == ZMQ_PUSH);
    assert (zproxy_capture_type (proxy) == ZMQ_PUB);
    assert (zproxy_control_type (proxy) == ZMQ_SUB);
    
    char *front_check = zproxy_frontend_addr (proxy);
    assert (streq (front_check, front_addr));
  
    char *back_check = zproxy_backend_addr (proxy);
    assert (streq (back_check, back_addr));

    char *capture_check = zproxy_capture_addr (proxy);
    assert (streq (capture_check, capture_addr));
   
    char *control_check = zproxy_control_addr (proxy);
    assert (streq (control_check, control_addr));

    //  Connect to the proxy front, back, and capture ports
    void *front_s = zsocket_new (ctx, ZMQ_PUSH);
    assert (front_s);
    rc = zsocket_connect (front_s, zproxy_frontend_addr (proxy));

    void *back_s = zsocket_new (ctx, ZMQ_PULL);
    assert (back_s);
    rc = zsocket_connect (back_s, zproxy_backend_addr (proxy));

#if (ZMQ_VERSION >= ZPROXY_HAS_PROXY)
    void *capture_s = zsocket_new (ctx, ZMQ_SUB);
    zsocket_set_subscribe (capture_s, "");
    rc = zsocket_connect (capture_s, zproxy_capture_addr (proxy));
#endif

    //  Send a message through the proxy and receive it
    zstr_send (front_s, "STREAMER_TEST");
    char *back_resp = zstr_recv (back_s);
    assert (back_resp);
    assert (streq ("STREAMER_TEST", back_resp));
    free (back_resp);
   
#if (ZMQ_VERSION >= ZPROXY_HAS_PROXY)
    char *capture_resp = zstr_recv (capture_s);
    assert (capture_resp);
    assert (streq ("STREAMER_TEST", capture_resp));
    free (capture_resp);
#endif

    rc = zproxy_pause (proxy);
#if (ZMQ_VERSION >= ZPROXY_HAS_STEERABLE)
    assert (rc == 0);
#else
    assert (rc == -1);
#endif

    rc = zproxy_resume (proxy);
#if (ZMQ_VERSION >= ZPROXY_HAS_STEERABLE)
    assert (rc == 0);
#else
    assert (rc == -1);
#endif

    
    rc = zproxy_terminate (proxy);
#if (ZMQ_VERSION >= ZPROXY_HAS_STEERABLE)
    assert (rc == 0);
#else
    assert (rc == -1);
#endif

    //  Destroying the context will stop the proxy, see note at
    //  start of source about using zmq_proxy_steerable instead.
    //  The sleep here is to ensure memory is freed so valgrind
    //  will be happy.
    zctx_destroy (&ctx);
    zproxy_destroy (&proxy);
    zclock_sleep (100);

----

SEE ALSO
--------
linkczmq:czmq[7]
