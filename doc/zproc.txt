zproc(3)
========

NAME
----
zproc - process configuration and status

SYNOPSIS
--------
----
//  Returns CZMQ version as a single 6-digit integer encoding the major
//  version (x 10000), the minor version (x 100) and the patch.        
CZMQ_EXPORT int
    zproc_czmq_version (void);

//  Returns true if the process received a SIGINT or SIGTERM signal.
//  It is good practice to use this method to exit any infinite loop
//  processing messages.                                            
CZMQ_EXPORT bool
    zproc_interrupted (void);

//  Return current host name, for use in public tcp:// endpoints.
//  If the host name is not resolvable, returns NULL.            
//  The caller is responsible for destroying the return value when finished with it.
CZMQ_EXPORT char *
    zproc_hostname (void);

//  Move the current process into the background. The precise effect     
//  depends on the operating system. On POSIX boxes, moves to a specified
//  working directory (if specified), closes all file handles, reopens   
//  stdin, stdout, and stderr to the null device, and sets the process to
//  ignore SIGHUP. On Windows, does nothing. Returns 0 if OK, -1 if there
//  was an error.                                                        
CZMQ_EXPORT void
    zproc_daemonize (const char *workdir);

//  Drop the process ID into the lockfile, with exclusive lock, and   
//  switch the process to the specified group and/or user. Any of the 
//  arguments may be null, indicating a no-op. Returns 0 on success,  
//  -1 on failure. Note if you combine this with zsys_daemonize, run  
//  after, not before that method, or the lockfile will hold the wrong
//  process ID.                                                       
CZMQ_EXPORT void
    zproc_run_as (const char *lockfile, const char *group, const char *user);

//  Configure the number of I/O threads that ZeroMQ will use. A good  
//  rule of thumb is one thread per gigabit of traffic in or out. The 
//  default is 1, sufficient for most applications. If the environment
//  variable ZSYS_IO_THREADS is defined, that provides the default.   
//  Note that this method is valid only before any socket is created. 
CZMQ_EXPORT void
    zproc_set_io_threads (size_t io_threads);

//  Configure the number of sockets that ZeroMQ will allow. The default  
//  is 1024. The actual limit depends on the system, and you can query it
//  by using zsys_socket_limit (). A value of zero means "maximum".      
//  Note that this method is valid only before any socket is created.    
CZMQ_EXPORT void
    zproc_set_max_sockets (size_t max_sockets);

//  Return maximum number of ZeroMQ sockets that the system will support.
CZMQ_EXPORT size_t
    zproc_max_sockets (void);

//  Configure the default linger timeout in msecs for new zsock instances. 
//  You can also set this separately on each zsock_t instance. The default 
//  linger time is zero, i.e. any pending messages will be dropped. If the 
//  environment variable ZSYS_LINGER is defined, that provides the default.
//  Note that process exit will typically be delayed by the linger time.   
CZMQ_EXPORT void
    zproc_set_linger (size_t linger);

//  Configure the default outgoing pipe limit (HWM) for new zsock instances.
//  You can also set this separately on each zsock_t instance. The default  
//  HWM is 1,000, on all versions of ZeroMQ. If the environment variable    
//  ZSYS_SNDHWM is defined, that provides the default. Note that a value of 
//  zero means no limit, i.e. infinite memory consumption.                  
CZMQ_EXPORT void
    zproc_set_sndhwm (size_t sndhwm);

//  Configure the default incoming pipe limit (HWM) for new zsock instances.
//  You can also set this separately on each zsock_t instance. The default  
//  HWM is 1,000, on all versions of ZeroMQ. If the environment variable    
//  ZSYS_RCVHWM is defined, that provides the default. Note that a value of 
//  zero means no limit, i.e. infinite memory consumption.                  
CZMQ_EXPORT void
    zproc_set_rcvhwm (size_t rcvhwm);

//  Configure use of IPv6 for new zsock instances. By default sockets accept   
//  and make only IPv4 connections. When you enable IPv6, sockets will accept  
//  and connect to both IPv4 and IPv6 peers. You can override the setting on   
//  each zsock_t instance. The default is IPv4 only (ipv6 set to false). If the
//  environment variable ZSYS_IPV6 is defined (as 1 or 0), this provides the   
//  default. Note: has no effect on ZMQ v2.                                    
CZMQ_EXPORT void
    zproc_set_ipv6 (bool ipv6);

//  Return use of IPv6 for zsock instances.
CZMQ_EXPORT bool
    zproc_ipv6 (void);

//  Set network interface name to use for broadcasts, particularly zbeacon.    
//  This lets the interface be configured for test environments where required.
//  For example, on Mac OS X, zbeacon cannot bind to 255.255.255.255 which is  
//  the default when there is no specified interface. If the environment       
//  variable ZSYS_INTERFACE is set, use that as the default interface name.    
//  Setting the interface to "*" means "use all available interfaces".         
CZMQ_EXPORT void
    zproc_set_interface (const char *value);

//  Return network interface to use for broadcasts, or "" if none was set.
CZMQ_EXPORT const char *
    zproc_interface (void);

//  Set log identity, which is a string that prefixes all log messages sent
//  by this process. The log identity defaults to the environment variable 
//  ZSYS_LOGIDENT, if that is set.                                         
CZMQ_EXPORT void
    zproc_log_set_ident (const char *value);

//  Sends log output to a PUB socket bound to the specified endpoint. To   
//  collect such log output, create a SUB socket, subscribe to the traffic 
//  you care about, and connect to the endpoint. Log traffic is sent as a  
//  single string frame, in the same format as when sent to stdout. The    
//  log system supports a single sender; multiple calls to this method will
//  bind the same sender to multiple endpoints. To disable the sender, call
//  this method with a null argument.                                      
CZMQ_EXPORT void
    zproc_log_set_sender (const char *endpoint);

//  Enable or disable logging to the system facility (syslog on POSIX boxes,
//  event log on Windows). By default this is disabled.                     
CZMQ_EXPORT void
    zproc_log_set_system (bool logsystem);

//  Log error condition - highest priority
CZMQ_EXPORT void
    zproc_log_error (const char *format, ...) CHECK_PRINTF (1);

//  Log warning condition - high priority
CZMQ_EXPORT void
    zproc_log_warning (const char *format, ...) CHECK_PRINTF (1);

//  Log normal, but significant, condition - normal priority
CZMQ_EXPORT void
    zproc_log_notice (const char *format, ...) CHECK_PRINTF (1);

//  Log informational message - low priority
CZMQ_EXPORT void
    zproc_log_info (const char *format, ...) CHECK_PRINTF (1);

//  Log debug-level message - lowest priority
CZMQ_EXPORT void
    zproc_log_debug (const char *format, ...) CHECK_PRINTF (1);

//  Self test of this class.
CZMQ_EXPORT void
    zproc_test (bool verbose);
----

DESCRIPTION
-----------

Process configuration and status. This class provides a public interface
to the zsys class, principally for higher-level languages that work via
a generated binding.

You can use either zsys or zproc in CZMQ applications. This class has a
somewhat cleaner API.

EXAMPLE
-------
.From zproc_test method
----
//  Simple create/destroy test
zproc_t *self = zproc_new ();
assert (self);
zproc_destroy (&self);
----
