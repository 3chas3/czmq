zsockopt(7)
===========

NAME
----
zsockopt - get/set 0MQ socket options

SYNOPSIS
--------
----
//  Set socket ZMQ_HWM value
void
    zsockopt_set_hwm (void *socket, int hwm);

//  Return socket ZMQ_HWM value
int
    zsockopt_hwm (void *socket);

//  Set socket ZMQ_SWAP value
void
    zsockopt_set_swap (void *socket, int swap);

//  Return socket ZMQ_SWAP value
int
    zsockopt_swap (void *socket);

//  Set socket ZMQ_AFFINITY value
void
    zsockopt_set_affinity (void *socket, int affinity);

//  Return socket ZMQ_AFFINITY value
int
    zsockopt_affinity (void *socket);

//  Set socket ZMQ_IDENTITY value
void
    zsockopt_set_identity (void *socket, char * identity);

//  Set socket ZMQ_RATE value
void
    zsockopt_set_rate (void *socket, int rate);

//  Return socket ZMQ_RATE value
int
    zsockopt_rate (void *socket);

//  Set socket ZMQ_RECOVERY_IVL value
void
    zsockopt_set_recovery_ivl (void *socket, int recovery_ivl);

//  Return socket ZMQ_RECOVERY_IVL value
int
    zsockopt_recovery_ivl (void *socket);

//  Set socket ZMQ_RECOVERY_IVL_MSEC value
void
    zsockopt_set_recovery_ivl_msec (void *socket, int recovery_ivl_msec);

//  Return socket ZMQ_RECOVERY_IVL_MSEC value
int
    zsockopt_recovery_ivl_msec (void *socket);

//  Set socket ZMQ_MCAST_LOOP value
void
    zsockopt_set_mcast_loop (void *socket, int mcast_loop);

//  Return socket ZMQ_MCAST_LOOP value
int
    zsockopt_mcast_loop (void *socket);

//  Set socket ZMQ_SNDBUF value
void
    zsockopt_set_sndbuf (void *socket, int sndbuf);

//  Return socket ZMQ_SNDBUF value
int
    zsockopt_sndbuf (void *socket);

//  Set socket ZMQ_RCVBUF value
void
    zsockopt_set_rcvbuf (void *socket, int rcvbuf);

//  Return socket ZMQ_RCVBUF value
int
    zsockopt_rcvbuf (void *socket);

//  Set socket ZMQ_LINGER value
void
    zsockopt_set_linger (void *socket, int linger);

//  Return socket ZMQ_LINGER value
int
    zsockopt_linger (void *socket);

//  Set socket ZMQ_RECONNECT_IVL value
void
    zsockopt_set_reconnect_ivl (void *socket, int reconnect_ivl);

//  Return socket ZMQ_RECONNECT_IVL value
int
    zsockopt_reconnect_ivl (void *socket);

//  Set socket ZMQ_RECONNECT_IVL_MAX value
void
    zsockopt_set_reconnect_ivl_max (void *socket, int reconnect_ivl_max);

//  Return socket ZMQ_RECONNECT_IVL_MAX value
int
    zsockopt_reconnect_ivl_max (void *socket);

//  Set socket ZMQ_BACKLOG value
void
    zsockopt_set_backlog (void *socket, int backlog);

//  Return socket ZMQ_BACKLOG value
int
    zsockopt_backlog (void *socket);

//  Set socket ZMQ_SUBSCRIBE value
void
    zsockopt_set_subscribe (void *socket, char * subscribe);

//  Set socket ZMQ_UNSUBSCRIBE value
void
    zsockopt_set_unsubscribe (void *socket, char * unsubscribe);

//  Return socket ZMQ_TYPE value
int
    zsockopt_type (void *socket);

//  Return socket ZMQ_RCVMORE value
int
    zsockopt_rcvmore (void *socket);

//  Return socket ZMQ_FD value
int
    zsockopt_fd (void *socket);

//  Return socket ZMQ_EVENTS value
int
    zsockopt_events (void *socket);

//  Self test of this class
int
    zsockopt_test (Bool verbose);
----

DESCRIPTION
-----------

The zsockopt class provides access to the 0MQ getsockopt/setsockopt API.

This class is generated, using the GSL code generator. See the sockopts
XML file, which provides the metadata, and the sockopts.gsl template,
which does the work.

EXAMPLE
-------
.From zsockopt_test method
----
    zctx_t *ctx = zctx_new ();

    //  All options are valid on SUB sockets
    void *socket = zsocket_new (ctx, ZMQ_SUB);

    zsockopt_set_hwm (socket, 1);
    assert (zsockopt_hwm (socket) == 1);
    zsockopt_hwm (socket);
    zsockopt_set_swap (socket, 1);
    assert (zsockopt_swap (socket) == 1);
    zsockopt_swap (socket);
    zsockopt_set_affinity (socket, 1);
    assert (zsockopt_affinity (socket) == 1);
    zsockopt_affinity (socket);
    zsockopt_set_identity (socket, "test");
    zsockopt_set_rate (socket, 1);
    assert (zsockopt_rate (socket) == 1);
    zsockopt_rate (socket);
    zsockopt_set_recovery_ivl (socket, 1);
    assert (zsockopt_recovery_ivl (socket) == 1);
    zsockopt_recovery_ivl (socket);
    zsockopt_set_recovery_ivl_msec (socket, 1);
    assert (zsockopt_recovery_ivl_msec (socket) == 1);
    zsockopt_recovery_ivl_msec (socket);
    zsockopt_set_mcast_loop (socket, 1);
    assert (zsockopt_mcast_loop (socket) == 1);
    zsockopt_mcast_loop (socket);
    zsockopt_set_sndbuf (socket, 1);
    assert (zsockopt_sndbuf (socket) == 1);
    zsockopt_sndbuf (socket);
    zsockopt_set_rcvbuf (socket, 1);
    assert (zsockopt_rcvbuf (socket) == 1);
    zsockopt_rcvbuf (socket);
    zsockopt_set_linger (socket, 1);
    assert (zsockopt_linger (socket) == 1);
    zsockopt_linger (socket);
    zsockopt_set_reconnect_ivl (socket, 1);
    assert (zsockopt_reconnect_ivl (socket) == 1);
    zsockopt_reconnect_ivl (socket);
    zsockopt_set_reconnect_ivl_max (socket, 1);
    assert (zsockopt_reconnect_ivl_max (socket) == 1);
    zsockopt_reconnect_ivl_max (socket);
    zsockopt_set_backlog (socket, 1);
    assert (zsockopt_backlog (socket) == 1);
    zsockopt_backlog (socket);
    zsockopt_set_subscribe (socket, "test");
    zsockopt_set_unsubscribe (socket, "test");
    zsockopt_type (socket);
    zsockopt_rcvmore (socket);
    zsockopt_fd (socket);
    zsockopt_events (socket);

    zctx_destroy (&ctx);
----

SEE ALSO
--------
linkzapi:zapi[7]
