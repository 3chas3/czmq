<class name = "zdigest" >

    <include filename = "../license.xml" />

    <constructor>
        Constructor - creates new digest object, which you use to build up a
        digest by repeatedly calling zdigest_update() on chunks of data.
    </constructor>

    <destructor>
        Destroy a digest object
    </destructor>

    <method name = "update">
        Add buffer into digest calculation
        <argument name = "buffer" type = "buffer" mutable = "1" />
        <argument name = "length" type = "size" />
    </method>

    <method name = "data">
        Return final digest hash data. If built without crypto support, returns
        NULL.
        <return type = "buffer" mutable = "1" />
    </method>

    <method name = "size">
        Return final digest hash size
        <return type = "size" />
    </method>

    <method name = "string">
        Return digest as printable hex string; caller should not modify nor
        free this string. After calling this, you may not use zdigest_update()
        on the same digest. If built without crypto support, returns NULL.
        <return type = "string" mutable = "1" />
    </method>

</class>
