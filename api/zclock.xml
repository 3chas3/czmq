<class name = "zclock" >

    <include filename = "../license.xml" />

    <method name = "sleep" singleton = "1">
        Sleep for a number of milliseconds
        <argument name = "msecs" type = "integer" />
    </method>

    <method name = "time" singleton = "1">
        Return current system clock as milliseconds. Note that this clock can
        jump backwards (if the system clock is changed) so is unsafe to use for
        timers and time offsets. Use zclock_mono for that instead.
        <return type = "clock" />
    </method>

    <method name = "mono" singleton = "1">
        Return current monotonic clock in milliseconds. Use this when you compute
        time offsets. The monotonic clock is not affected by system changes and
        so will never be reset backwards, unlike a system clock.
        <return type = "clock" />
    </method>

    <method name = "usecs" singleton = "1">
        Return current monotonic clock in microseconds. Use this when you compute
        time offsets. The monotonic clock is not affected by system changes and
        so will never be reset backwards, unlike a system clock.
        <return type = "clock" />
    </method>

    <method name = "timestr" singleton = "1">
        Return formatted date/time as fresh string. Free using zstr_free().
        <return type = "string" fresh = "1" />
    </method>
</class>
