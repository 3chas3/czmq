<class name = "zcert">
    zcert

    <include filename = "license.xml" />

    <constructor>
        Create and initialize a new certificate in memory
    </constructor>

    <destructor>
        Destroy a certificate in memory
    </destructor>


    <method name = "new from" singleton = "1">
        Constructor, accepts public/secret key pair from caller
        <argument name = "public key" type = "buffer" />
        <argument name = "secret key" type = "buffer" />
        <return type = "zcert" fresh = "1" />
    </method>

    <method name = "print" exclude = "1" />

    <method name = "public key">
        Return public part of key pair as 32-byte binary string
        <return type = "buffer" fresh = "1" />
    </method>

    <method name = "secret key">
        Return secret part of key pair as 32-byte binary string
        <return type = "buffer" fresh = "1" />
    </method>

    <method name = "public txt">
        Return public part of key pair as Z85 armored string
        <return type = "string" fresh = "1" />
    </method>

    <method name = "secret txt">
        Return secret part of key pair as Z85 armored string
        <return type = "string" fresh = "1" />
    </method>

    <method name = "set meta">
        Set certificate metadata from formatted string.
        zcert_set_meta (zcert_t *self, const char *name, const char *format, ...);
        <argument name = "name" type = "string" />
        <argument name = "format" type = "format" />
    </method>

    <method name = "meta">
        Get metadata value from certificate; if the metadata value doesn't
        exist, returns NULL.
        <argument name = "name" type = "string" />
        <return type = "string" fresh = "1" />
    </method>

    <method name = "meta keys">
        Get list of metadata fields from certificate. Caller is responsible for
        destroying list. Caller should not modify the values of list items.
        <return type = "zlist" fresh = "1" />
    </method>

    <method name = "load" singleton = "1">
        Load certificate from file (constructor)
        <argument name = "filename" type = "string" />
        <return type = "zcert" fresh = "1" />
    </method>

    <method name = "save">
        Save full certificate (public + secret) to file for persistent storage
        This creates one public file and one secret file (filename + "_secret").
        <argument name = "filename" type = "string" />
        <return type = "integer" />
    </method>

    <method name = "save public">
        Save public certificate only to file for persistent storage
        <argument name = "filename" type = "string" />
        <return type = "integer" />
    </method>

    <method name = "save secret">
        Save secret certificate only to file for persistent storage
        <argument name = "filename" type = "string" />
        <return type = "integer" />
    </method>

    <method name = "apply">
        Apply certificate to socket, i.e. use for CURVE security on socket.
        If certificate was loaded from public file, the secret key will be
        undefined, and this certificate will not work successfully.
        <argument name = "zocket" type = "anything" />
    </method>

    <method name = "dup">
        Return copy of certificate; if certificate is null or we exhausted
        heap memory, returns null.
        <return type = "zcert" fresh = "1" />
    </method>

    <method name = "eq">
        Return true if two certificates have the same keys
        <argument name = "compare" type = "zcert" />
        <return type = "boolean" />
    </method>

    <method name = "test" singleton = "1">
        Self test of this class.
        <argument name = "verbose" type = "boolean" />
    </method>
</class>
