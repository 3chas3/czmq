<!--
******************************************************************
*   GENERATED SOURCE CODE, DO NOT EDIT!!                         *
*   TO CHANGE THIS, EDIT api/zsock.gsl AND/OR src/sockopts.xml   *
*   AND RUN `gen sockopts` in src/.                              *
******************************************************************
-->
<class name = "zsock">
    high-level socket API that hides libzmq contexts and sockets

    <include filename = "license.xml" />

    <constructor>
        Create a new socket. Returns the new socket, or NULL if the new socket
        could not be created. Note that the symbol zsock_new (and other
        constructors/destructors for zsock) are redirected to the *_checked
        variant, enabling intelligent socket leak detection. This can have
        performance implications if you use a LOT of sockets. To turn off this
        redirection behaviour, define ZSOCK_NOCHECK.
        <argument name = "type" type = "integer" />
    </constructor>

    <destructor>
        Destroy the socket. You must use this for any socket created via the
        zsock_new method.
    </destructor>

    <method name = "print" exclude = "1" />

    <method name = "new pub" singleton = "1">
        Create a PUB socket. Default action is bind.
        <argument name = "endpoint" type = "string" />
        <return type = "zsock" fresh = "1" />
    </method>

    <method name = "new sub" singleton = "1">
        Create a SUB socket, and optionally subscribe to some prefix string. Default
        action is connect.
        <argument name = "endpoint" type = "string" />
        <argument name = "subscribe" type = "string" />
        <return type = "zsock" fresh = "1" />
    </method>

    <method name = "new req" singleton = "1">
        Create a REQ socket. Default action is connect.
        <argument name = "endpoint" type = "string" />
        <return type = "zsock" fresh = "1" />
    </method>

    <method name = "new rep" singleton = "1">
        Create a REP socket. Default action is bind.
        <argument name = "endpoint" type = "string" />
        <return type = "zsock" fresh = "1" />
    </method>

    <method name = "new dealer" singleton = "1">
        Create a DEALER socket. Default action is connect.
        <argument name = "endpoint" type = "string" />
        <return type = "zsock" fresh = "1" />
    </method>

    <method name = "new router" singleton = "1">
        Create a ROUTER socket. Default action is bind.
        <argument name = "endpoint" type = "string" />
        <return type = "zsock" fresh = "1" />
    </method>

    <method name = "new push" singleton = "1">
        Create a PUSH socket. Default action is connect.
        <argument name = "endpoint" type = "string" />
        <return type = "zsock" fresh = "1" />
    </method>

    <method name = "new pull" singleton = "1">
        Create a PULL socket. Default action is bind.
        <argument name = "endpoint" type = "string" />
        <return type = "zsock" fresh = "1" />
    </method>

    <method name = "new xpub" singleton = "1">
        Create an XPUB socket. Default action is bind.
        <argument name = "endpoint" type = "string" />
        <return type = "zsock" fresh = "1" />
    </method>

    <method name = "new xsub" singleton = "1">
        Create an XSUB socket. Default action is connect.
        <argument name = "endpoint" type = "string" />
        <return type = "zsock" fresh = "1" />
    </method>

    <method name = "new pair" singleton = "1">
        Create a PAIR socket. Default action is connect.
        <argument name = "endpoint" type = "string" />
        <return type = "zsock" fresh = "1" />
    </method>

    <method name = "new stream" singleton = "1">
        Create a STREAM socket. Default action is connect.
        <argument name = "endpoint" type = "string" />
        <return type = "zsock" fresh = "1" />
    </method>

    <method name = "new server" singleton = "1">
        Create a SERVER socket. Default action is bind.
        <argument name = "endpoint" type = "string" />
        <return type = "zsock" fresh = "1" />
    </method>

    <method name = "new client" singleton = "1">
        Create a CLIENT socket. Default action is connect.
        <argument name = "endpoint" type = "string" />
        <return type = "zsock" fresh = "1" />
    </method>

    <method name = "bind">
        Bind a socket to a formatted endpoint. For tcp:// endpoints, supports
        ephemeral ports, if you specify the port number as "*". By default
        zsock uses the IANA designated range from C000 (49152) to FFFF (65535).
        To override this range, follow the "*" with "[first-last]". Either or
        both first and last may be empty. To bind to a random port within the
        range, use "!" in place of "*".

        Examples:
            tcp://127.0.0.1:*           bind to first free port from C000 up
            tcp://127.0.0.1:!           bind to random port from C000 to FFFF
            tcp://127.0.0.1:*[60000-]   bind to first free port from 60000 up
            tcp://127.0.0.1:![-60000]   bind to random port from C000 to 60000
            tcp://127.0.0.1:![55000-55999]
                                        bind to random port from 55000 to 55999

        On success, returns the actual port number used, for tcp:// endpoints,
        and 0 for other transports. On failure, returns -1. Note that when using
        ephemeral ports, a port may be reused by different services without
        clients being aware. Protocols that run on ephemeral ports should take
        this into account.
        <argument name = "format" type = "format" />
        <return type = "integer" />
    </method>

    <method name = "endpoint">
        Returns last bound endpoint, if any.
        <return type = "string" />
    </method>

    <method name = "unbind">
        Unbind a socket from a formatted endpoint.
        Returns 0 if OK, -1 if the endpoint was invalid or the function
        isn't supported.
        <argument name = "format" type = "format" />
        <return type = "integer" />
    </method>

    <method name = "connect">
        Connect a socket to a formatted endpoint
        Returns 0 if OK, -1 if the endpoint was invalid.
        <argument name = "format" type = "format" />
        <return type = "integer" />
    </method>

    <method name = "disconnect">
        Disconnect a socket from a formatted endpoint
        Returns 0 if OK, -1 if the endpoint was invalid or the function
        isn't supported.
        <argument name = "format" type = "format" />
        <return type = "integer" />
    </method>

    <method name = "attach">
        Attach a socket to zero or more endpoints. If endpoints is not null,
        parses as list of ZeroMQ endpoints, separated by commas, and prefixed by
        '@' (to bind the socket) or '>' (to connect the socket). Returns 0 if all
        endpoints were valid, or -1 if there was a syntax error. If the endpoint
        does not start with '@' or '>', the serverish argument defines whether
        it is used to bind (serverish = true) or connect (serverish = false).
        <argument name = "endpoints" type = "string" />
        <argument name = "serverish" type = "boolean" />
        <return type = "integer" />
    </method>

    <method name = "type str">
        Returns socket type as printable constant string.
        <return type = "string" />
    </method>

    <method name = "send" polymorphic = "1">
        Send a 'picture' message to the socket (or actor). The picture is a
        string that defines the type of each frame. This makes it easy to send
        a complex multiframe message in one call. The picture can contain any
        of these characters, each corresponding to one or two arguments:

            i = int (signed)
            1 = uint8_t
            2 = uint16_t
            4 = uint32_t
            8 = uint64_t
            s = char *
            b = byte *, size_t (2 arguments)
            c = zchunk_t *
            f = zframe_t *
            h = zhashx_t *
            U = zuuid_t *
            p = void * (sends the pointer value, only meaningful over inproc)
            m = zmsg_t * (sends all frames in the zmsg)
            z = sends zero-sized frame (0 arguments)
            u = uint (deprecated)

        Note that s, b, c, and f are encoded the same way and the choice is
        offered as a convenience to the sender, which may or may not already
        have data in a zchunk or zframe. Does not change or take ownership of
        any arguments. Returns 0 if successful, -1 if sending failed for any
        reason.
        <argument name = "picture" type = "string" variadic = "1" />
        <return type = "integer" />
    </method>

    <method name = "vsend" polymorphic = "1">
        Send a 'picture' message to the socket (or actor). This is a va_list
        version of zsock_send (), so please consult its documentation for the
        details.
        <argument name = "picture" type = "string" />
        <argument name = "argptr" type = "va_list" />
        <return type = "integer" />
    </method>

    <method name = "recv" polymorphic = "1">
        Receive a 'picture' message to the socket (or actor). See zsock_send for
        the format and meaning of the picture. Returns the picture elements into
        a series of pointers as provided by the caller:

            i = int * (stores signed integer)
            4 = uint32_t * (stores 32-bit unsigned integer)
            8 = uint64_t * (stores 64-bit unsigned integer)
            s = char ** (allocates new string)
            b = byte **, size_t * (2 arguments) (allocates memory)
            c = zchunk_t ** (creates zchunk)
            f = zframe_t ** (creates zframe)
            U = zuuid_t * (creates a zuuid with the data)
            h = zhashx_t ** (creates zhashx)
            p = void ** (stores pointer)
            m = zmsg_t ** (creates a zmsg with the remaing frames)
            z = null, asserts empty frame (0 arguments)
            u = uint * (stores unsigned integer, deprecated)

        Note that zsock_recv creates the returned objects, and the caller must
        destroy them when finished with them. The supplied pointers do not need
        to be initialized. Returns 0 if successful, or -1 if it failed to recv
        a message, in which case the pointers are not modified. When message
        frames are truncated (a short message), sets return values to zero/null.
        If an argument pointer is NULL, does not store any value (skips it).
        An 'n' picture matches an empty frame; if the message does not match,
        the method will return -1.
        <argument name = "picture" type = "string" variadic = "1" />
        <return type = "integer" />
    </method>

    <method name = "vrecv" polymorphic = "1">
        Receive a 'picture' message from the socket (or actor). This is a
        va_list version of zsock_recv (), so please consult its documentation
        for the details.
        <argument name = "picture" type = "string" />
        <argument name = "argptr" type = "va_list" />
        <return type = "integer" />
    </method>

    <method name = "bsend" polymorphic = "1">
        Send a binary encoded 'picture' message to the socket (or actor). This
        method is similar to zsock_send, except the arguments are encoded in a
        binary format that is compatible with zproto, and is designed to reduce
        memory allocations. The pattern argument is a string that defines the
        type of each argument. Supports these argument types:

         pattern    C type                  zproto type:
            1       uint8_t                 type = "number" size = "1"
            2       uint16_t                type = "number" size = "2"
            4       uint32_t                type = "number" size = "3"
            8       uint64_t                type = "number" size = "4"
            s       char *, 0-255 chars     type = "string"
            S       char *, 0-2^32-1 chars  type = "longstr"
            c       zchunk_t *              type = "chunk"
            f       zframe_t *              type = "frame"
            u       zuuid_t *               type = "uuid"
            m       zmsg_t *                type = "msg"
            p       void *, sends pointer value, only over inproc

        Does not change or take ownership of any arguments. Returns 0 if
        successful, -1 if sending failed for any reason.
        <argument name = "picture" type = "string" variadic = "1" />
        <return type = "integer" />
    </method>

    <method name = "brecv" polymorphic = "1">
        Receive a binary encoded 'picture' message from the socket (or actor).
        This method is similar to zsock_recv, except the arguments are encoded
        in a binary format that is compatible with zproto, and is designed to
        reduce memory allocations. The pattern argument is a string that defines
        the type of each argument. See zsock_bsend for the supported argument
        types. All arguments must be pointers; this call sets them to point to
        values held on a per-socket basis. Do not modify or destroy the returned
        values. Returns 0 if successful, or -1 if it failed to read a message.
        <argument name = "picture" type = "string" variadic = "1" />
        <return type = "integer" />
    </method>

    <method name = "routing id">
        Return socket routing ID if any. This returns 0 if the socket is not
        of type ZMQ_SERVER or if no request was already received on it.
        <return type = "number" size = "4" />
    </method>

    <method name = "set routing id">
        Set routing ID on socket. The socket MUST be of type ZMQ_SERVER.
        This will be used when sending messages on the socket via the zsock API.
        <argument name = "routing id" type = "number" size = "4" />
    </method>

    <method name = "set unbounded" polymorphic = "1">
        Set socket to use unbounded pipes (HWM=0); use this in cases when you are
        totally certain the message volume can fit in memory. This method works
        across all versions of ZeroMQ. Takes a polymorphic socket reference.
    </method>

    <method name = "signal" polymorphic = "1">
        Send a signal over a socket. A signal is a short message carrying a
        success/failure code (by convention, 0 means OK). Signals are encoded
        to be distinguishable from "normal" messages. Accepts a zsock_t or a
        zactor_t argument, and returns 0 if successful, -1 if the signal could
        not be sent. Takes a polymorphic socket reference.
        <argument name = "status" type = "byte" />
        <return type = "integer" />
    </method>

    <method name = "wait" polymorphic = "1">
        Wait on a signal. Use this to coordinate between threads, over pipe
        pairs. Blocks until the signal is received. Returns -1 on error, 0 or
        greater on success. Accepts a zsock_t or a zactor_t as argument.
        Takes a polymorphic socket reference.
        <return type = "integer" />
    </method>

    <method name = "flush" polymorphic = "1">
        If there is a partial message still waiting on the socket, remove and
        discard it. This is useful when reading partial messages, to get specific
        message types.
    </method>


    <method name = "tos" polymorphic = "1">
        Get socket option `tos`.
        <return type="integer" />
    </method>

    <method name = "set tos" polymorphic = "1">
        Set socket option `tos`.
        <argument name = "tos" type="integer" />
    </method>

    <method name = "set router handover" polymorphic = "1">
        Set socket option `router_handover`.
        <argument name = "router handover" type="integer" />
    </method>

    <method name = "set router mandatory" polymorphic = "1">
        Set socket option `router_mandatory`.
        <argument name = "router mandatory" type="integer" />
    </method>

    <method name = "set probe router" polymorphic = "1">
        Set socket option `probe_router`.
        <argument name = "probe router" type="integer" />
    </method>

    <method name = "set req relaxed" polymorphic = "1">
        Set socket option `req_relaxed`.
        <argument name = "req relaxed" type="integer" />
    </method>

    <method name = "set req correlate" polymorphic = "1">
        Set socket option `req_correlate`.
        <argument name = "req correlate" type="integer" />
    </method>

    <method name = "set conflate" polymorphic = "1">
        Set socket option `conflate`.
        <argument name = "conflate" type="integer" />
    </method>

    <method name = "zap domain" polymorphic = "1">
        Get socket option `zap_domain`.
        <return type="string" />
    </method>

    <method name = "set zap domain" polymorphic = "1">
        Set socket option `zap_domain`.
        <argument name = "zap domain" type="string" />
    </method>

    <method name = "mechanism" polymorphic = "1">
        Get socket option `mechanism`.
        <return type="integer" />
    </method>

    <method name = "plain server" polymorphic = "1">
        Get socket option `plain_server`.
        <return type="integer" />
    </method>

    <method name = "set plain server" polymorphic = "1">
        Set socket option `plain_server`.
        <argument name = "plain server" type="integer" />
    </method>

    <method name = "plain username" polymorphic = "1">
        Get socket option `plain_username`.
        <return type="string" />
    </method>

    <method name = "set plain username" polymorphic = "1">
        Set socket option `plain_username`.
        <argument name = "plain username" type="string" />
    </method>

    <method name = "plain password" polymorphic = "1">
        Get socket option `plain_password`.
        <return type="string" />
    </method>

    <method name = "set plain password" polymorphic = "1">
        Set socket option `plain_password`.
        <argument name = "plain password" type="string" />
    </method>

    <method name = "curve server" polymorphic = "1">
        Get socket option `curve_server`.
        <return type="integer" />
    </method>

    <method name = "set curve server" polymorphic = "1">
        Set socket option `curve_server`.
        <argument name = "curve server" type="integer" />
    </method>

    <method name = "curve publickey" polymorphic = "1">
        Get socket option `curve_publickey`.
        <return type="key" />
    </method>

    <method name = "set curve publickey" polymorphic = "1">
        Set socket option `curve_publickey`.
        <argument name = "curve publickey" type="key" />
    </method>

    <method name = "curve secretkey" polymorphic = "1">
        Get socket option `curve_secretkey`.
        <return type="key" />
    </method>

    <method name = "set curve secretkey" polymorphic = "1">
        Set socket option `curve_secretkey`.
        <argument name = "curve secretkey" type="key" />
    </method>

    <method name = "curve serverkey" polymorphic = "1">
        Get socket option `curve_serverkey`.
        <return type="key" />
    </method>

    <method name = "set curve serverkey" polymorphic = "1">
        Set socket option `curve_serverkey`.
        <argument name = "curve serverkey" type="key" />
    </method>

    <method name = "gssapi server" polymorphic = "1">
        Get socket option `gssapi_server`.
        <return type="integer" />
    </method>

    <method name = "set gssapi server" polymorphic = "1">
        Set socket option `gssapi_server`.
        <argument name = "gssapi server" type="integer" />
    </method>

    <method name = "gssapi plaintext" polymorphic = "1">
        Get socket option `gssapi_plaintext`.
        <return type="integer" />
    </method>

    <method name = "set gssapi plaintext" polymorphic = "1">
        Set socket option `gssapi_plaintext`.
        <argument name = "gssapi plaintext" type="integer" />
    </method>

    <method name = "gssapi principal" polymorphic = "1">
        Get socket option `gssapi_principal`.
        <return type="string" />
    </method>

    <method name = "set gssapi principal" polymorphic = "1">
        Set socket option `gssapi_principal`.
        <argument name = "gssapi principal" type="string" />
    </method>

    <method name = "gssapi service principal" polymorphic = "1">
        Get socket option `gssapi_service_principal`.
        <return type="string" />
    </method>

    <method name = "set gssapi service principal" polymorphic = "1">
        Set socket option `gssapi_service_principal`.
        <argument name = "gssapi service principal" type="string" />
    </method>

    <method name = "ipv6" polymorphic = "1">
        Get socket option `ipv6`.
        <return type="integer" />
    </method>

    <method name = "set ipv6" polymorphic = "1">
        Set socket option `ipv6`.
        <argument name = "ipv6" type="integer" />
    </method>

    <method name = "immediate" polymorphic = "1">
        Get socket option `immediate`.
        <return type="integer" />
    </method>

    <method name = "set immediate" polymorphic = "1">
        Set socket option `immediate`.
        <argument name = "immediate" type="integer" />
    </method>

    <method name = "set router raw" polymorphic = "1">
        Set socket option `router_raw`.
        <argument name = "router raw" type="integer" />
    </method>

    <method name = "ipv4only" polymorphic = "1">
        Get socket option `ipv4only`.
        <return type="integer" />
    </method>

    <method name = "set ipv4only" polymorphic = "1">
        Set socket option `ipv4only`.
        <argument name = "ipv4only" type="integer" />
    </method>

    <method name = "set delay attach on connect" polymorphic = "1">
        Set socket option `delay_attach_on_connect`.
        <argument name = "delay attach on connect" type="integer" />
    </method>

    <method name = "type" polymorphic = "1">
        Get socket option `type`.
        <return type="integer" />
    </method>

    <method name = "sndhwm" polymorphic = "1">
        Get socket option `sndhwm`.
        <return type="integer" />
    </method>

    <method name = "set sndhwm" polymorphic = "1">
        Set socket option `sndhwm`.
        <argument name = "sndhwm" type="integer" />
    </method>

    <method name = "rcvhwm" polymorphic = "1">
        Get socket option `rcvhwm`.
        <return type="integer" />
    </method>

    <method name = "set rcvhwm" polymorphic = "1">
        Set socket option `rcvhwm`.
        <argument name = "rcvhwm" type="integer" />
    </method>

    <method name = "affinity" polymorphic = "1">
        Get socket option `affinity`.
        <return type="uint64" />
    </method>

    <method name = "set affinity" polymorphic = "1">
        Set socket option `affinity`.
        <argument name = "affinity" type="uint64" />
    </method>

    <method name = "set subscribe" polymorphic = "1">
        Set socket option `subscribe`.
        <argument name = "subscribe" type="string" />
    </method>

    <method name = "set unsubscribe" polymorphic = "1">
        Set socket option `unsubscribe`.
        <argument name = "unsubscribe" type="string" />
    </method>

    <method name = "identity" polymorphic = "1">
        Get socket option `identity`.
        <return type="string" />
    </method>

    <method name = "set identity" polymorphic = "1">
        Set socket option `identity`.
        <argument name = "identity" type="string" />
    </method>

    <method name = "rate" polymorphic = "1">
        Get socket option `rate`.
        <return type="integer" />
    </method>

    <method name = "set rate" polymorphic = "1">
        Set socket option `rate`.
        <argument name = "rate" type="integer" />
    </method>

    <method name = "recovery ivl" polymorphic = "1">
        Get socket option `recovery_ivl`.
        <return type="integer" />
    </method>

    <method name = "set recovery ivl" polymorphic = "1">
        Set socket option `recovery_ivl`.
        <argument name = "recovery ivl" type="integer" />
    </method>

    <method name = "sndbuf" polymorphic = "1">
        Get socket option `sndbuf`.
        <return type="integer" />
    </method>

    <method name = "set sndbuf" polymorphic = "1">
        Set socket option `sndbuf`.
        <argument name = "sndbuf" type="integer" />
    </method>

    <method name = "rcvbuf" polymorphic = "1">
        Get socket option `rcvbuf`.
        <return type="integer" />
    </method>

    <method name = "set rcvbuf" polymorphic = "1">
        Set socket option `rcvbuf`.
        <argument name = "rcvbuf" type="integer" />
    </method>

    <method name = "linger" polymorphic = "1">
        Get socket option `linger`.
        <return type="integer" />
    </method>

    <method name = "set linger" polymorphic = "1">
        Set socket option `linger`.
        <argument name = "linger" type="integer" />
    </method>

    <method name = "reconnect ivl" polymorphic = "1">
        Get socket option `reconnect_ivl`.
        <return type="integer" />
    </method>

    <method name = "set reconnect ivl" polymorphic = "1">
        Set socket option `reconnect_ivl`.
        <argument name = "reconnect ivl" type="integer" />
    </method>

    <method name = "reconnect ivl max" polymorphic = "1">
        Get socket option `reconnect_ivl_max`.
        <return type="integer" />
    </method>

    <method name = "set reconnect ivl max" polymorphic = "1">
        Set socket option `reconnect_ivl_max`.
        <argument name = "reconnect ivl max" type="integer" />
    </method>

    <method name = "backlog" polymorphic = "1">
        Get socket option `backlog`.
        <return type="integer" />
    </method>

    <method name = "set backlog" polymorphic = "1">
        Set socket option `backlog`.
        <argument name = "backlog" type="integer" />
    </method>

    <method name = "maxmsgsize" polymorphic = "1">
        Get socket option `maxmsgsize`.
        <return type="int64" />
    </method>

    <method name = "set maxmsgsize" polymorphic = "1">
        Set socket option `maxmsgsize`.
        <argument name = "maxmsgsize" type="int64" />
    </method>

    <method name = "multicast hops" polymorphic = "1">
        Get socket option `multicast_hops`.
        <return type="integer" />
    </method>

    <method name = "set multicast hops" polymorphic = "1">
        Set socket option `multicast_hops`.
        <argument name = "multicast hops" type="integer" />
    </method>

    <method name = "rcvtimeo" polymorphic = "1">
        Get socket option `rcvtimeo`.
        <return type="integer" />
    </method>

    <method name = "set rcvtimeo" polymorphic = "1">
        Set socket option `rcvtimeo`.
        <argument name = "rcvtimeo" type="integer" />
    </method>

    <method name = "sndtimeo" polymorphic = "1">
        Get socket option `sndtimeo`.
        <return type="integer" />
    </method>

    <method name = "set sndtimeo" polymorphic = "1">
        Set socket option `sndtimeo`.
        <argument name = "sndtimeo" type="integer" />
    </method>

    <method name = "set xpub verbose" polymorphic = "1">
        Set socket option `xpub_verbose`.
        <argument name = "xpub verbose" type="integer" />
    </method>

    <method name = "tcp keepalive" polymorphic = "1">
        Get socket option `tcp_keepalive`.
        <return type="integer" />
    </method>

    <method name = "set tcp keepalive" polymorphic = "1">
        Set socket option `tcp_keepalive`.
        <argument name = "tcp keepalive" type="integer" />
    </method>

    <method name = "tcp keepalive idle" polymorphic = "1">
        Get socket option `tcp_keepalive_idle`.
        <return type="integer" />
    </method>

    <method name = "set tcp keepalive idle" polymorphic = "1">
        Set socket option `tcp_keepalive_idle`.
        <argument name = "tcp keepalive idle" type="integer" />
    </method>

    <method name = "tcp keepalive cnt" polymorphic = "1">
        Get socket option `tcp_keepalive_cnt`.
        <return type="integer" />
    </method>

    <method name = "set tcp keepalive cnt" polymorphic = "1">
        Set socket option `tcp_keepalive_cnt`.
        <argument name = "tcp keepalive cnt" type="integer" />
    </method>

    <method name = "tcp keepalive intvl" polymorphic = "1">
        Get socket option `tcp_keepalive_intvl`.
        <return type="integer" />
    </method>

    <method name = "set tcp keepalive intvl" polymorphic = "1">
        Set socket option `tcp_keepalive_intvl`.
        <argument name = "tcp keepalive intvl" type="integer" />
    </method>

    <method name = "tcp accept filter" polymorphic = "1">
        Get socket option `tcp_accept_filter`.
        <return type="string" />
    </method>

    <method name = "set tcp accept filter" polymorphic = "1">
        Set socket option `tcp_accept_filter`.
        <argument name = "tcp accept filter" type="string" />
    </method>

    <method name = "rcvmore" polymorphic = "1">
        Get socket option `rcvmore`.
        <return type="integer" />
    </method>

    <method name = "fd" polymorphic = "1">
        Get socket option `fd`.
        <return type="socket" />
    </method>

    <method name = "events" polymorphic = "1">
        Get socket option `events`.
        <return type="integer" />
    </method>

    <method name = "last endpoint" polymorphic = "1">
        Get socket option `last_endpoint`.
        <return type="string" />
    </method>

    <method name = "is" singleton = "1">
        Probe the supplied object, and report if it looks like a zsock_t.
        Takes a polymorphic socket reference.
        <argument name = "self" type = "anything" />
        <return type = "boolean" />
    </method>

    <method name = "resolve" singleton = "1" polymorphic = "1">
        Probe the supplied reference. If it looks like a zsock_t instance, return
        the underlying libzmq socket handle; else if it looks like a file
        descriptor, return NULL; else if it looks like a libzmq socket handle,
        return the supplied value. Takes a polymorphic socket reference.
        <argument name = "self" type = "anything" />
        <return type = "anything" />
    </method>

    <method name = "test" singleton = "1">
        Self test of this class
        <argument name = "verbose" type = "boolean" />
    </method>

    <include filename = "api/zsock_options.xml" />
</class>
