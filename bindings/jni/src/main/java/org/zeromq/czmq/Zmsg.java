/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/
package org.zeromq.czmq;

public class Zmsg implements AutoCloseable {
    static {
        try {
            System.loadLibrary ("czmqjni");
        }
        catch (Exception e) {
            System.exit (-1);
        }
    }
    long self;

    /*
    Create a new empty message object
    */
    native static long __init ();
    public Zmsg () {
        /*  TODO: if __init fails, self is null...  */
        self = __init ();
    }
    /*
    Destroy a message object and all frames it contains
    */
    native static void __destroy (long self);
    @Override
    public void close() {
        __destroy (self);
        self = 0;
    }
    /*
    Receive message from socket, returns zmsg_t object or NULL if the recv   
    was interrupted. Does a blocking recv. If you want to not block then use 
    the zloop class or zmsg_recv_nowait or zmq_poll to check for socket input
    before receiving.                                                        
    */
    native static Zmsg __recv (void * source);
    public Zmsg recv (void * source) {
        return Zmsg.__recv (source);
    }
    /*
    Send message to destination socket, and destroy the message after sending
    it successfully. If the message has no frames, sends nothing but destroys
    the message anyhow. Nullifies the caller's reference to the message (as  
    it is a destructor).                                                     
    */
    native static int __send (Zmsg selfP, void * dest);
    public int send (Zmsg selfP, void * dest) {
        return Zmsg.__send (selfP, dest);
    }
    /*
    Send message to destination socket as part of a multipart sequence, and 
    destroy the message after sending it successfully. Note that after a    
    zmsg_sendm, you must call zmsg_send or another method that sends a final
    message part. If the message has no frames, sends nothing but destroys  
    the message anyhow. Nullifies the caller's reference to the message (as 
    it is a destructor).                                                    
    */
    native static int __sendm (Zmsg selfP, void * dest);
    public int sendm (Zmsg selfP, void * dest) {
        return Zmsg.__sendm (selfP, dest);
    }
    /*
    Return size of message, i.e. number of frames (0 or more).
    */
    native static long __size (long self);
    public long size (long self) {
        return Zmsg.__size (self);
    }
    /*
    Return total size of all frames in message.
    */
    native static long __content_size (long self);
    public long content_size (long self) {
        return Zmsg.__content_size (self);
    }
    /*
    Return message routing ID, if the message came from a ZMQ_SERVER socket.
    Else returns zero.                                                      
    */
    native static int __routing_id (long self);
    public int routing_id (long self) {
        return Zmsg.__routing_id (self);
    }
    /*
    Set routing ID on message. This is used if/when the message is sent to a
    ZMQ_SERVER socket.                                                      
    */
    native static void __set_routing_id (long self, int routingId);
    public void set_routing_id (long self, int routingId) {
        return Zmsg.__set_routing_id (self, routingId);
    }
    /*
    Push frame to the front of the message, i.e. before all other frames.  
    Message takes ownership of frame, will destroy it when message is sent.
    Returns 0 on success, -1 on error. Deprecates zmsg_push, which did not 
    nullify the caller's frame reference.                                  
    */
    native static int __prepend (long self, Zframe frameP);
    public int prepend (long self, Zframe frameP) {
        return Zmsg.__prepend (self, frameP);
    }
    /*
    Add frame to the end of the message, i.e. after all other frames.      
    Message takes ownership of frame, will destroy it when message is sent.
    Returns 0 on success. Deprecates zmsg_add, which did not nullify the   
    caller's frame reference.                                              
    */
    native static int __append (long self, Zframe frameP);
    public int append (long self, Zframe frameP) {
        return Zmsg.__append (self, frameP);
    }
    /*
    Remove first frame from message, if any. Returns frame, or NULL.
    */
    native static Zframe __pop (long self);
    public Zframe pop (long self) {
        return Zmsg.__pop (self);
    }
    /*
    Push block of memory to front of message, as a new frame.
    Returns 0 on success, -1 on error.                       
    */
    native static int __pushmem (long self, void * src, long size);
    public int pushmem (long self, void * src, long size) {
        return Zmsg.__pushmem (self, src, size);
    }
    /*
    Add block of memory to the end of the message, as a new frame.
    Returns 0 on success, -1 on error.                            
    */
    native static int __addmem (long self, void * src, long size);
    public int addmem (long self, void * src, long size) {
        return Zmsg.__addmem (self, src, size);
    }
    /*
    Push string as new frame to front of message.
    Returns 0 on success, -1 on error.           
    */
    native static int __pushstr (long self, String string);
    public int pushstr (long self, String string) {
        return Zmsg.__pushstr (self, string);
    }
    /*
    Push string as new frame to end of message.
    Returns 0 on success, -1 on error.         
    */
    native static int __addstr (long self, String string);
    public int addstr (long self, String string) {
        return Zmsg.__addstr (self, string);
    }
    /*
    Push formatted string as new frame to front of message.
    Returns 0 on success, -1 on error.                     
    */
    native static int __pushstrf (long self, String format);
    public int pushstrf (long self, String format) {
        return Zmsg.__pushstrf (self, format);
    }
    /*
    Push formatted string as new frame to end of message.
    Returns 0 on success, -1 on error.                   
    */
    native static int __addstrf (long self, String format);
    public int addstrf (long self, String format) {
        return Zmsg.__addstrf (self, format);
    }
    /*
    Pop frame off front of message, return as fresh string. If there were
    no more frames in the message, returns NULL.                         
    */
    native static String __popstr (long self);
    public String popstr (long self) {
        return Zmsg.__popstr (self);
    }
    /*
    Push encoded message as a new frame. Message takes ownership of    
    submessage, so the original is destroyed in this call. Returns 0 on
    success, -1 on error.                                              
    */
    native static int __addmsg (long self, Zmsg msgP);
    public int addmsg (long self, Zmsg msgP) {
        return Zmsg.__addmsg (self, msgP);
    }
    /*
    Remove first submessage from message, if any. Returns zmsg_t, or NULL if
    decoding was not succesfull.                                            
    */
    native static Zmsg __popmsg (long self);
    public Zmsg popmsg (long self) {
        return Zmsg.__popmsg (self);
    }
    /*
    Remove specified frame from list, if present. Does not destroy frame.
    */
    native static void __remove (long self, Zframe frame);
    public void remove (long self, Zframe frame) {
        return Zmsg.__remove (self, frame);
    }
    /*
    Set cursor to first frame in message. Returns frame, or NULL, if the
    message is empty. Use this to navigate the frames as a list.        
    */
    native static Zframe __first (long self);
    public Zframe first (long self) {
        return Zmsg.__first (self);
    }
    /*
    Return the next frame. If there are no more frames, returns NULL. To move
    to the first frame call zmsg_first(). Advances the cursor.               
    */
    native static Zframe __next (long self);
    public Zframe next (long self) {
        return Zmsg.__next (self);
    }
    /*
    Return the last frame. If there are no frames, returns NULL.
    */
    native static Zframe __last (long self);
    public Zframe last (long self) {
        return Zmsg.__last (self);
    }
    /*
    Serialize multipart message to a single buffer. Use this method to send  
    structured messages across transports that do not support multipart data.
    Allocates and returns a new buffer containing the serialized message.    
    To decode a serialized message buffer, use zmsg_decode ().               
    */
    native static long __encode (long self, byte [] buffer);
    public long encode (long self, byte [] buffer) {
        return Zmsg.__encode (self, buffer);
    }
    /*
    Decodes a serialized message buffer created by zmsg_encode () and returns
    a new zmsg_t object. Returns NULL if the buffer was badly formatted or   
    there was insufficient memory to work.                                   
    */
    native static Zmsg __decode (byte [] buffer, long bufferSize);
    public Zmsg decode (byte [] buffer, long bufferSize) {
        return Zmsg.__decode (buffer, bufferSize);
    }
    /*
    Create copy of message, as new message object. Returns a fresh zmsg_t
    object. If message is null, or memory was exhausted, returns null.   
    */
    native static Zmsg __dup (long self);
    public Zmsg dup (long self) {
        return Zmsg.__dup (self);
    }
    /*
    Send message to zsys log sink (may be stdout, or system facility as
    configured by zsys_set_logstream).                                 
    */
    native static void __print (long self);
    public void print (long self) {
        return Zmsg.__print (self);
    }
    /*
    Return true if the two messages have the same number of frames and each  
    frame in the first message is identical to the corresponding frame in the
    other message. As with zframe_eq, return false if either message is NULL.
    */
    native static boolean __eq (long self, Zmsg other);
    public boolean eq (long self, Zmsg other) {
        return Zmsg.__eq (self, other);
    }
    /*
    Generate a signal message encoding the given status. A signal is a short
    message carrying a 1-byte success/failure code (by convention, 0 means  
    OK). Signals are encoded to be distinguishable from "normal" messages.  
    */
    native static Zmsg __new_signal (byte status);
    public Zmsg new_signal (byte status) {
        return Zmsg.__new_signal (status);
    }
    /*
    Return signal value, 0 or greater, if message is a signal, -1 if not.
    */
    native static int __signal (long self);
    public int signal (long self) {
        return Zmsg.__signal (self);
    }
    /*
    Probe the supplied object, and report if it looks like a zmsg_t.
    */
    native static boolean __is (void * self);
    public boolean is (void * self) {
        return Zmsg.__is (self);
    }
    /*
    Self test of this class.
    */
    native static void __test (boolean verbose);
    public void test (boolean verbose) {
        return Zmsg.__test (verbose);
    }
}
