/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/
package org.zeromq.czmq;

public class Zmsg implements AutoCloseable{
    static {
        try {
            System.loadLibrary ("czmqjni");
        }
        catch (Exception e) {
            System.exit (-1);
        }
    }
    long self;
    /*
    Create a new empty message object
    */
    native static long __new ();
    public Zmsg () {
        /*  TODO: if __new fails, self is null...  */
        self = __new ();
    }
    /*
    Destroy a message object and all frames it contains
    */
    native static void __destroy (long self);
    @Override
    public void close () {
        __destroy (self);
        self = 0;
    }
    /*
    Receive message from socket, returns zmsg_t object or NULL if the recv   
    was interrupted. Does a blocking recv. If you want to not block then use 
    the zloop class or zmsg_recv_nowait or zmq_poll to check for socket input
    before receiving.                                                        
    */
    native static long __recv (long source);
    public long recv (long source) {
        return __recv (source);
    }
    /*
    Send message to destination socket, and destroy the message after sending
    it successfully. If the message has no frames, sends nothing but destroys
    the message anyhow. Nullifies the caller's reference to the message (as  
    it is a destructor).                                                     
    */
    native static int __send (long selfP, long dest);
    public int send (long selfP, long dest) {
        return __send (selfP, dest);
    }
    /*
    Send message to destination socket as part of a multipart sequence, and 
    destroy the message after sending it successfully. Note that after a    
    zmsg_sendm, you must call zmsg_send or another method that sends a final
    message part. If the message has no frames, sends nothing but destroys  
    the message anyhow. Nullifies the caller's reference to the message (as 
    it is a destructor).                                                    
    */
    native static int __sendm (long selfP, long dest);
    public int sendm (long selfP, long dest) {
        return __sendm (selfP, dest);
    }
    /*
    Return size of message, i.e. number of frames (0 or more).
    */
    native static long __size (long self);
    public long size (long self) {
        return __size (self);
    }
    /*
    Return total size of all frames in message.
    */
    native static long __contentSize (long self);
    public long contentSize (long self) {
        return __contentSize (self);
    }
    /*
    Return message routing ID, if the message came from a ZMQ_SERVER socket.
    Else returns zero.                                                      
    */
    native static int __routingId (long self);
    public int routingId (long self) {
        return __routingId (self);
    }
    /*
    Set routing ID on message. This is used if/when the message is sent to a
    ZMQ_SERVER socket.                                                      
    */
    native static void __setRoutingId (long self, int routingId);
    public void setRoutingId (long self, int routingId) {
        __setRoutingId (self, routingId);
    }
    /*
    Push frame to the front of the message, i.e. before all other frames.  
    Message takes ownership of frame, will destroy it when message is sent.
    Returns 0 on success, -1 on error. Deprecates zmsg_push, which did not 
    nullify the caller's frame reference.                                  
    */
    native static int __prepend (long self, long frameP);
    public int prepend (long self, long frameP) {
        return __prepend (self, frameP);
    }
    /*
    Add frame to the end of the message, i.e. after all other frames.      
    Message takes ownership of frame, will destroy it when message is sent.
    Returns 0 on success. Deprecates zmsg_add, which did not nullify the   
    caller's frame reference.                                              
    */
    native static int __append (long self, long frameP);
    public int append (long self, long frameP) {
        return __append (self, frameP);
    }
    /*
    Remove first frame from message, if any. Returns frame, or NULL.
    */
    native static long __pop (long self);
    public long pop (long self) {
        return __pop (self);
    }
    /*
    Push block of memory to front of message, as a new frame.
    Returns 0 on success, -1 on error.                       
    */
    native static int __pushmem (long self, long src, long size);
    public int pushmem (long self, long src, long size) {
        return __pushmem (self, src, size);
    }
    /*
    Add block of memory to the end of the message, as a new frame.
    Returns 0 on success, -1 on error.                            
    */
    native static int __addmem (long self, long src, long size);
    public int addmem (long self, long src, long size) {
        return __addmem (self, src, size);
    }
    /*
    Push string as new frame to front of message.
    Returns 0 on success, -1 on error.           
    */
    native static int __pushstr (long self, String string);
    public int pushstr (long self, String string) {
        return __pushstr (self, string);
    }
    /*
    Push string as new frame to end of message.
    Returns 0 on success, -1 on error.         
    */
    native static int __addstr (long self, String string);
    public int addstr (long self, String string) {
        return __addstr (self, string);
    }
    /*
    Push formatted string as new frame to front of message.
    Returns 0 on success, -1 on error.                     
    */
    native static int __pushstrf (long self, String format);
    public int pushstrf (long self, String format) {
        return __pushstrf (self, format);
    }
    /*
    Push formatted string as new frame to end of message.
    Returns 0 on success, -1 on error.                   
    */
    native static int __addstrf (long self, String format);
    public int addstrf (long self, String format) {
        return __addstrf (self, format);
    }
    /*
    Pop frame off front of message, return as fresh string. If there were
    no more frames in the message, returns NULL.                         
    */
    native static String __popstr (long self);
    public String popstr (long self) {
        return __popstr (self);
    }
    /*
    Push encoded message as a new frame. Message takes ownership of    
    submessage, so the original is destroyed in this call. Returns 0 on
    success, -1 on error.                                              
    */
    native static int __addmsg (long self, long msgP);
    public int addmsg (long self, long msgP) {
        return __addmsg (self, msgP);
    }
    /*
    Remove first submessage from message, if any. Returns zmsg_t, or NULL if
    decoding was not succesfull.                                            
    */
    native static long __popmsg (long self);
    public long popmsg (long self) {
        return __popmsg (self);
    }
    /*
    Remove specified frame from list, if present. Does not destroy frame.
    */
    native static void __remove (long self, long frame);
    public void remove (long self, long frame) {
        __remove (self, frame);
    }
    /*
    Set cursor to first frame in message. Returns frame, or NULL, if the
    message is empty. Use this to navigate the frames as a list.        
    */
    native static long __first (long self);
    public long first (long self) {
        return __first (self);
    }
    /*
    Return the next frame. If there are no more frames, returns NULL. To move
    to the first frame call zmsg_first(). Advances the cursor.               
    */
    native static long __next (long self);
    public long next (long self) {
        return __next (self);
    }
    /*
    Return the last frame. If there are no frames, returns NULL.
    */
    native static long __last (long self);
    public long last (long self) {
        return __last (self);
    }
    /*
    Create copy of message, as new message object. Returns a fresh zmsg_t
    object. If message is null, or memory was exhausted, returns null.   
    */
    native static long __dup (long self);
    public long dup (long self) {
        return __dup (self);
    }
    /*
    Send message to zsys log sink (may be stdout, or system facility as
    configured by zsys_set_logstream).                                 
    */
    native static void __print (long self);
    public void print (long self) {
        __print (self);
    }
    /*
    Return true if the two messages have the same number of frames and each  
    frame in the first message is identical to the corresponding frame in the
    other message. As with zframe_eq, return false if either message is NULL.
    */
    native static boolean __eq (long self, long other);
    public boolean eq (long self, long other) {
        return __eq (self, other);
    }
    /*
    Generate a signal message encoding the given status. A signal is a short
    message carrying a 1-byte success/failure code (by convention, 0 means  
    OK). Signals are encoded to be distinguishable from "normal" messages.  
    */
    native static long __newSignal (byte status);
    public long newSignal (byte status) {
        return __newSignal (status);
    }
    /*
    Return signal value, 0 or greater, if message is a signal, -1 if not.
    */
    native static int __signal (long self);
    public int signal (long self) {
        return __signal (self);
    }
    /*
    Probe the supplied object, and report if it looks like a zmsg_t.
    */
    native static boolean __is (long self);
    public boolean is (long self) {
        return __is (self);
    }
    /*
    Self test of this class.
    */
    native static void __test (boolean verbose);
    public void test (boolean verbose) {
        __test (verbose);
    }
}
