/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
*/
package org.zeromq.czmq;

public class Zarmour implements AutoCloseable{
    static {
        try {
            System.loadLibrary ("czmqjni");
        }
        catch (Exception e) {
            System.exit (-1);
        }
    }
    long self;
    /*
    Create a new zarmour.
    */
    native static long __init ();
    public Zarmour () {
        /*  TODO: if __init fails, self is null...  */
        self = __init ();
    }
    /*
    Destroy the zarmour.
    */
    native static void __destroy (long self);
    @Override
    public void close () {
        __destroy (self);
        self = 0;
    }
    /*
    Get printable string for mode.
    */
    native static String __mode_str (long self);
    public String modeStr (long self) {
        return __mode_str (self);
    }
    /*
    Encode a stream of bytes into an armoured string.
    */
    native static String __encode (long self, byte [] data, long dataSize);
    public String encode (long self, byte [] data, long dataSize) {
        return __encode (self, data, dataSize);
    }
    /*
    Decode an armoured string into a string of bytes.          
    The decoded output is null-terminated, so it may be treated
    as a string, if that's what it was prior to encoding.      
    */
    native static byte [] __decode (long self, String data, long decodeSize);
    public byte [] decode (long self, String data, long decodeSize) {
        return __decode (self, data, decodeSize);
    }
    /*
    Get the mode property.
    */
    native static int __mode (long self);
    public int mode (long self) {
        return __mode (self);
    }
    /*
    Set the mode property.
    */
    native static void __set_mode (long self, int mode);
    public void setMode (long self, int mode) {
        __set_mode (self, mode);
    }
    /*
    Return true if padding is turned on.
    */
    native static boolean __pad (long self);
    public boolean pad (long self) {
        return __pad (self);
    }
    /*
    Turn padding on or off. Default is on.
    */
    native static void __set_pad (long self, boolean pad);
    public void setPad (long self, boolean pad) {
        __set_pad (self, pad);
    }
    /*
    Get the padding character.
    */
    native static char __pad_char (long self);
    public char padChar (long self) {
        return __pad_char (self);
    }
    /*
    Set the padding character.
    */
    native static void __set_pad_char (long self, char padChar);
    public void setPadChar (long self, char padChar) {
        __set_pad_char (self, padChar);
    }
    /*
    Return if splitting output into lines is turned on. Default is off.
    */
    native static boolean __line_breaks (long self);
    public boolean lineBreaks (long self) {
        return __line_breaks (self);
    }
    /*
    Turn splitting output into lines on or off.
    */
    native static void __set_line_breaks (long self, boolean lineBreaks);
    public void setLineBreaks (long self, boolean lineBreaks) {
        __set_line_breaks (self, lineBreaks);
    }
    /*
    Get the line length used for splitting lines.
    */
    native static long __line_length (long self);
    public long lineLength (long self) {
        return __line_length (self);
    }
    /*
    Set the line length used for splitting lines.
    */
    native static void __set_line_length (long self, long lineLength);
    public void setLineLength (long self, long lineLength) {
        __set_line_length (self, lineLength);
    }
    /*
    Print properties of object
    */
    native static void __print (long self);
    public void print (long self) {
        __print (self);
    }
    /*
    Self test of this class.
    */
    native static void __test (boolean verbose);
    public void test (boolean verbose) {
        __test (verbose);
    }
}
