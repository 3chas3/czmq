/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/

dependencies {
    compile 'org.scijava:native-lib-loader:2.3.4'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}

//  ------------------------------------------------------------------
//  Build section

task generateJniHeaders(type: Exec, dependsOn: 'classes') {
    def classpath = sourceSets.main.output.classesDirs
    def appclasspath = configurations.runtime.files*.getAbsolutePath().join(File.pathSeparator)
    def nativeIncludes = 'src/native/include'
    def jniClasses = [
            'src/main/java/org/zeromq/czmq/Zarmour.java',
            'src/main/java/org/zeromq/czmq/Zcert.java',
            'src/main/java/org/zeromq/czmq/Zcertstore.java',
            'src/main/java/org/zeromq/czmq/Zchunk.java',
            'src/main/java/org/zeromq/czmq/Zclock.java',
            'src/main/java/org/zeromq/czmq/Zconfig.java',
            'src/main/java/org/zeromq/czmq/Zdigest.java',
            'src/main/java/org/zeromq/czmq/Zdir.java',
            'src/main/java/org/zeromq/czmq/ZdirPatch.java',
            'src/main/java/org/zeromq/czmq/Zfile.java',
            'src/main/java/org/zeromq/czmq/Zframe.java',
            'src/main/java/org/zeromq/czmq/Zhash.java',
            'src/main/java/org/zeromq/czmq/Zhashx.java',
            'src/main/java/org/zeromq/czmq/Ziflist.java',
            'src/main/java/org/zeromq/czmq/Zlist.java',
            'src/main/java/org/zeromq/czmq/Zlistx.java',
            'src/main/java/org/zeromq/czmq/Zloop.java',
            'src/main/java/org/zeromq/czmq/Zmsg.java',
            'src/main/java/org/zeromq/czmq/Zpoller.java',
            'src/main/java/org/zeromq/czmq/Zproc.java',
            'src/main/java/org/zeromq/czmq/Zsock.java',
            'src/main/java/org/zeromq/czmq/Zstr.java',
            'src/main/java/org/zeromq/czmq/Zsys.java',
            'src/main/java/org/zeromq/czmq/Ztimerset.java',
            'src/main/java/org/zeromq/czmq/Ztrie.java',
            'src/main/java/org/zeromq/czmq/Zuuid.java',
            'src/main/java/org/zeromq/czmq/ZhttpClient.java',
            'src/main/java/org/zeromq/czmq/ZhttpServer.java',
            'src/main/java/org/zeromq/czmq/ZhttpServerOptions.java',
            'src/main/java/org/zeromq/czmq/ZhttpRequest.java',
            'src/main/java/org/zeromq/czmq/ZhttpResponse.java'
    ]
    def utilityClasses = [
            'src/main/java/org/zeromq/tools/ZmqNativeLoader.java'
    ]
    commandLine("javac", "-h", "$nativeIncludes", "-classpath", "$classpath${File.pathSeparator}$appclasspath", *jniClasses, *utilityClasses)
}

tasks.withType(Test) {
    def defaultJavaLibraryPath = System.getProperty("java.library.path")
    if (osdetector.os == 'windows') {
        systemProperty "java.library.path", "${projectDir}/build/Release${File.pathSeparator}${defaultJavaLibraryPath}"
    } else {
        systemProperty "java.library.path", "${projectDir}${File.pathSeparator}${defaultJavaLibraryPath}${File.pathSeparator}/usr/local/lib${File.pathSeparator}/tmp/lib"
    }
}

task initCMake(type: Exec, dependsOn: 'generateJniHeaders') {
    if (osdetector.os == 'windows') {
        def includePath = "${rootDir}/../../include"
        includePath += "${File.pathSeparator}${rootDir}/../../../libzmq/include"
        includePath += "${File.pathSeparator}${rootDir}/../../../uuid/include"
        includePath += "${File.pathSeparator}${rootDir}/../../../systemd/include"
        includePath += "${File.pathSeparator}${rootDir}/../../../lz4/include"
        includePath += "${File.pathSeparator}${rootDir}/../../../libcurl/include"
        includePath += "${File.pathSeparator}${rootDir}/../../../nss/include"
        includePath += "${File.pathSeparator}${rootDir}/../../../libmicrohttpd/include"
        workingDir  'build'
        commandLine 'cmake',
                    '-G', vsGenerator,
                    '-D', "CMAKE_INCLUDE_PATH=\"${includePath}\"",
                    '..'
    } else {
        commandLine 'cmake', '.'
    }
}

task buildNative(type: Exec, dependsOn: 'initCMake') {
    if (osdetector.os == 'windows') {
        commandLine 'cmake',
                    '--build',  'build',
                    '--config', 'Release',
                    '--target', 'czmqjni',
                    '--', '-verbosity:Minimal',  '-maxcpucount'
    } else {
        commandLine 'make'
    }
}

jar.dependsOn buildNative
test.dependsOn buildNative

//  ------------------------------------------------------------------
//  Install and Publish section

task sourcesJar(type: Jar, dependsOn: 'classes') {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifactId = 'czmq-jni'
            pom {
                name = 'czmq-jni'
                description = 'The high-level C binding for 0MQ'
                packaging = 'jar'
                url = 'https://github.com/zeromq/czmq'
                licenses {
                    license {
                        name = 'Mozilla Public License Version 2.0'
                        url = 'https://www.mozilla.org/en-US/MPL/2.0/'
                    }
                }
                scm {
                    connection = 'https://github.com/zeromq/czmq.git'
                    developerConnection = 'https://github.com/zeromq/czmq.git'
                    url = 'https://github.com/zeromq/czmq'
                }
            }
        }
    }
}

artifactoryPublish {
    publications ('mavenJava')
}


bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['mavenJava']
    publish = true
    override = true
    pkg {
        repo = 'maven'
        name = 'czmq-jni'
        desc = 'The high-level C binding for 0MQ'
        userOrg = System.getenv('BINTRAY_USER_ORG')
        licenses = ['MPL-2.0']
        websiteUrl = 'https://github.com/zeromq/czmq'
        issueTrackerUrl = 'https://github.com/zeromq/czmq/issues'
        vcsUrl = 'https://github.com/zeromq/czmq.git'
        githubRepo = System.getenv('BINTRAY_USER_ORG') + '/czmq'
        version {
            name = project.version
            vcsTag= project.version
        }
    }
}

//  ------------------------------------------------------------------
//  Cleanup section

clean.doFirst {
    delete 'CMakeFiles', 'msvc'
    delete fileTree(projectDir) {
        include '*.so'
        include '*.dylib'
        include 'cmake_install.cmake'
        include 'Makefile'
        include 'CMakeCache.txt'
    }
}
