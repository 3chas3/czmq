################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################

module CZMQ
  module FFI

    # zarmour - armoured text encoding and decoding
    class Zarmour
      class DestroyedError < RuntimeError; end

      # Boilerplate for self pointer, initializer, and finalizer
      class << self
        alias :__new :new
      end
      def initialize ptr, finalize=true
        @ptr = ptr
        if @ptr.null?
          @ptr = nil # Remove null pointers so we don't have to test for them.
        elsif finalize
          @finalizer = self.class.create_finalizer_for @ptr
          ObjectSpace.define_finalizer self, @finalizer
        end
      end
      def self.create_finalizer_for ptr
        Proc.new do
          ptr_ptr = ::FFI::MemoryPointer.new :pointer
          ptr_ptr.write_pointer ptr
          ::CZMQ::FFI.zarmour_destroy ptr_ptr
        end
      end
      def null?
        !@ptr or @ptr.null?
      end
      # Return internal pointer
      def __ptr
        raise DestroyedError unless @ptr
        @ptr
      end
      # So external Libraries can just pass the Object to a FFI function which expects a :pointer
      alias_method :to_ptr, :__ptr
      # Nullify internal pointer and return pointer pointer
      def __ptr_give_ref
        raise DestroyedError unless @ptr
        ptr_ptr = ::FFI::MemoryPointer.new :pointer
        ptr_ptr.write_pointer @ptr
        ObjectSpace.undefine_finalizer self if @finalizer
        @finalizer = nil
        @ptr = nil
        ptr_ptr
      end

      # Create a new zarmour.
      def self.new()
        ptr = ::CZMQ::FFI.zarmour_new()
        __new ptr
      end

      # Destroy the zarmour.
      def destroy()
        return unless @ptr
        self_p = __ptr_give_ref
        result = ::CZMQ::FFI.zarmour_destroy(self_p)
        result
      end

      # Get printable string for mode.
      def mode_str()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::CZMQ::FFI.zarmour_mode_str(self_p)
        result
      end

      # Encode a stream of bytes into an armoured string.
      def encode(data, size)
        raise DestroyedError unless @ptr
        self_p = @ptr
        size = Integer(size)
        result = ::CZMQ::FFI.zarmour_encode(self_p, data, size)
        result = ::FFI::AutoPointer.new(result, LibC.method(:free))
        result
      end

      # Decode an armoured string into a string of bytes.          
      # The decoded output is null-terminated, so it may be treated
      # as a string, if that's what it was prior to encoding.      
      def decode(data, decode_size)
        raise DestroyedError unless @ptr
        self_p = @ptr
        data = String(data)
        result = ::CZMQ::FFI.zarmour_decode(self_p, data, decode_size)
        result
      end

      # Get the mode property.
      def mode()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::CZMQ::FFI.zarmour_mode(self_p)
        result
      end

      # Set the mode property.
      def set_mode(mode)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::CZMQ::FFI.zarmour_set_mode(self_p, mode)
        result
      end

      # Return true if padding is turned on.
      def pad()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::CZMQ::FFI.zarmour_pad(self_p)
        result
      end

      # Turn padding on or off. Default is on.
      def set_pad(pad)
        raise DestroyedError unless @ptr
        self_p = @ptr
        pad = !(0==pad||!pad) # boolean
        result = ::CZMQ::FFI.zarmour_set_pad(self_p, pad)
        result
      end

      # Get the padding character.
      def pad_char()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::CZMQ::FFI.zarmour_pad_char(self_p)
        result
      end

      # Set the padding character.
      def set_pad_char(pad_char)
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::CZMQ::FFI.zarmour_set_pad_char(self_p, pad_char)
        result
      end

      # Return if splitting output into lines is turned on. Default is off.
      def line_breaks()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::CZMQ::FFI.zarmour_line_breaks(self_p)
        result
      end

      # Turn splitting output into lines on or off.
      def set_line_breaks(line_breaks)
        raise DestroyedError unless @ptr
        self_p = @ptr
        line_breaks = !(0==line_breaks||!line_breaks) # boolean
        result = ::CZMQ::FFI.zarmour_set_line_breaks(self_p, line_breaks)
        result
      end

      # Get the line length used for splitting lines.
      def line_length()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::CZMQ::FFI.zarmour_line_length(self_p)
        result
      end

      # Set the line length used for splitting lines.
      def set_line_length(line_length)
        raise DestroyedError unless @ptr
        self_p = @ptr
        line_length = Integer(line_length)
        result = ::CZMQ::FFI.zarmour_set_line_length(self_p, line_length)
        result
      end

      # Print properties of object
      def print()
        raise DestroyedError unless @ptr
        self_p = @ptr
        result = ::CZMQ::FFI.zarmour_print(self_p)
        result
      end

      # Self test of this class.
      def self.test(verbose)
        verbose = !(0==verbose||!verbose) # boolean
        result = ::CZMQ::FFI.zarmour_test(verbose)
        result
      end
    end
  end
end

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
